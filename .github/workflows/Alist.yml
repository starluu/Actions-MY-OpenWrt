name: Download and Upload to Tianyi Cloud

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'File URL to download'
        required: true

jobs:
  process:
    runs-on: ubuntu-latest
    container:
      image: xhofe/alist:latest-aio
      options: --dns=8.8.8.8 -v /tmp/data:/opt/alist/data

    steps:
    - name: Install dependencies
      run: |
        apk update
        apk add jq curl
        
    - name: Start Alist service
      run: |
        # 使用绝对路径启动服务
        nohup /opt/alist/alist server > /opt/alist/alist.log 2>&1 &       
        
    - name: Start Alist service
      run: |
        # 启动Alist服务并确保在后台运行
        nohup ./alist server > alist.log 2>&1 &
        
        # 等待服务完全启动
        echo "等待Alist服务启动..."
        sleep 15
        
        # 检查服务状态
        if ! curl -s http://localhost:5244 >/dev/null; then
          echo "::error::Alist服务启动失败，查看日志:"
          cat alist.log
          exit 1
        fi
        echo "Alist服务已成功启动"

    - name: Get admin password
      id: get_password
      run: |
        cd /opt/alist
        # 从日志中提取初始密码
        password=$(grep "password" alist.log | awk '{print $NF}' | tail -1)
        
        # 如果无法获取密码，尝试从数据目录获取
        if [ -z "$password" ]; then
          password=$(grep "password" data/log/log.log | awk '{print $NF}' | tail -1)
        fi
        
        if [ -z "$password" ]; then
          echo "::error::无法获取管理员密码"
          exit 1
        fi
        
        echo "ALIST_PASSWORD=$password" >> $GITHUB_ENV
        echo "获取到初始密码: $password"

    - name: Configure Tianyi Cloud storage
      env:
        TIANYI_USER: ${{ secrets.TIANYI_USERNAME }}
        TIANYI_PWD: ${{ secrets.TIANYI_PASSWORD }}
      run: |
        # 1. 验证Token有效性
        echo "验证Token有效性..."
        token_response=$(curl -s -X POST http://localhost:5244/api/auth/login \
          -H 'Content-Type: application/json' \
          -d "{\"username\":\"admin\",\"password\":\"$ALIST_PASSWORD\"}")
        
        echo "登录响应: $token_response"
        
        if ! echo "$token_response" | jq -e '.code == 200' >/dev/null; then
          echo "::error::获取Token失败"
          exit 1
        fi
        
        token=$(echo "$token_response" | jq -r '.data.token')
        echo "获取到有效Token: $token"
        
        # 2. 检查当前存储配置 - 使用更可靠的查询
        echo "检查现有存储配置..."
        storage_list=$(curl -s -X GET http://localhost:5244/api/admin/storage/list \
          -H "Authorization: $token")
        
        echo "存储列表响应: $storage_list"
        
        # 调整查询方式以适应API响应结构
        if echo "$storage_list" | jq -e '.data | any(.mount_path == "/tianyi")' >/dev/null; then
          echo "天翼云盘存储已存在，跳过添加"
          exit 0
        fi
        
        # 3. 确保Cloud189驱动可用
        echo "检查Cloud189驱动是否可用..."
        drivers=$(curl -s -X GET http://localhost:5244/api/admin/driver/list \
          -H "Authorization: $token")
        
        if ! echo "$drivers" | jq -e '.drivers | any(.name == "Cloud189")' >/dev/null; then
          echo "::error::Cloud189驱动不可用"
          echo "可用驱动:"
          echo "$drivers" | jq '.drivers[].name'
          exit 1
        fi
        
        # 4. 使用更可靠的JSON构建方法
        echo "添加天翼云盘存储..."
        addition_json="{\"username\":\"$TIANYI_USER\",\"password\":\"$TIANYI_PWD\"}"
        
        # 使用jq构建完整的payload
        storage_payload=$(jq -n \
          --arg mount_path "/tianyi" \
          --arg driver "Cloud189" \
          --argjson cache_expiration 30 \
          --arg status "work" \
          --arg addition "$addition_json" \
          '{
            mount_path: $mount_path,
            order: 0,
            driver: $driver,
            cache_expiration: $cache_expiration,
            status: $status,
            addition: $addition
          }')
        
        echo "存储负载: $storage_payload"
        
        # 5. 添加存储并检查响应
        response=$(curl -i -s -X POST http://localhost:5244/api/admin/storage \
          -H "Authorization: $token" \
          -H 'Content-Type: application/json' \
          -d "$storage_payload")
        
        # 分离响应头和响应体
        response_header=$(echo "$response" | awk 'NR>1 && /^\r?$/{exit} {print}')
        response_body=$(echo "$response" | awk 'BEGIN{p=0} /^\r?$/{p=1} p')
        
        echo "存储添加响应头: $response_header"
        echo "存储添加响应体: $response_body"
        
        # 6. 验证添加结果
        if ! echo "$response_body" | jq -e '.code == 200' >/dev/null; then
          echo "::error::存储添加失败"
          
          # 尝试获取更详细的错误信息
          error_msg=$(echo "$response_body" | jq -r '.message // "未知错误"')
          echo "错误信息: $error_msg"
          
          # 检查Alist日志获取更多信息
          echo "Alist日志最后20行:"
          tail -20 alist.log
          
          exit 1
        fi
        
        echo "天翼云盘存储添加成功"

    - name: Download file with Aria2
      run: |
        # 创建下载目录
        mkdir -p /opt/alist/data/downloads
        
        # 使用内置的Aria2下载文件
        aria2c -d /opt/alist/data/downloads \
          -o downloaded_file \
          "${{ github.event.inputs.file_url || secrets.DOWNLOAD_URL }}"
        
        # 检查文件是否下载成功
        if [ ! -f "/opt/alist/data/downloads/downloaded_file" ]; then
          echo "::error::文件下载失败"
          exit 1
        fi
        echo "文件下载成功"

    - name: Upload to Tianyi Cloud
      env:
        ALIST_PASSWORD: ${{ env.ALIST_PASSWORD }}
      run: |
        # 获取登录Token
        token=$(curl -s -X POST http://localhost:5244/api/auth/login \
          -H 'Content-Type: application/json' \
          -d "{\"username\":\"admin\",\"password\":\"$ALIST_PASSWORD\"}" | \
          jq -r '.data.token')
        
        # 通过API上传文件
        response=$(curl -s -X POST http://localhost:5244/api/fs/put \
          -H "Authorization: $token" \
          -F "file=@/opt/alist/data/downloads/downloaded_file" \
          -F "path=/tianyi")
        
        echo "上传响应: $response"
        
        # 获取任务ID
        task_id=$(echo "$response" | jq -r '.data.task_id')
        if [ -z "$task_id" ] || [ "$task_id" = "null" ]; then
          echo "::error::获取上传任务ID失败"
          exit 1
        fi
        
        # 监控上传任务状态
        echo "监控上传任务: $task_id"
        for i in {1..30}; do
          status=$(curl -s -H "Authorization: $token" \
            "http://localhost:5244/api/admin/task/upload/$task_id" | \
            jq -r '.data.status')
          
          if [ "$status" = "completed" ]; then
            echo "上传完成"
            break
          elif [ "$status" = "error" ]; then
            echo "::error::上传失败"
            exit 1
          fi
          
          echo "任务状态 ($i/30): $status, 等待10秒..."
          sleep 10
        done
        
        if [ "$status" != "completed" ]; then
          echo "::error::上传超时"
          exit 1
        fi

    - name: Clean up
      if: always()
      run: |
        # 停止Alist服务
        pkill alist || true
        echo "清理完成"
