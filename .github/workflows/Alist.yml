name: Alist-AIO 自动化传输

on:
  workflow_dispatch:
    inputs:
      download_url:
        description: "🔗 要下载的文件URL (必须 http/https 开头)"
        required: true
        default: "https://example.com/demo-file.zip"
      cloud_path:
        description: "☁️ 天翼云保存路径"
        required: false
        default: "[/ty](/离线下载)"
  schedule:
    - cron: '0 0 * * *'  # 每日UTC 0点自动运行

jobs:
  alist-automation:
    runs-on: ubuntu-latest
    steps:
    # ========== 初始阶段：内网穿透 ==========
    - name: 使用 Ngrok 暴露端口
      run: |
        # 下载 ngrok
        wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar xvzf ngrok-v3-stable-linux-amd64.tgz
        
        # 设置认证令牌（在 https://dashboard.ngrok.com 获取）
        ./ngrok authtoken ${{ secrets.NGROK_TOKEN }}
        
        # 启动隧道
        ./ngrok http 5244 > /dev/null &
        
        # 获取公共 URL
        sleep 5
        NGROK_URL=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
        echo "ALIST_PUBLIC_URL=$NGROK_URL" >> $GITHUB_ENV
        echo "🌐 Alist 已暴露在公网: $NGROK_URL"
        
    # ========== 第一阶段：容器初始化 ==========
    - name: 启动Alist-AIO容器
      run: |
        docker run -d --name alist-aio \
          -p 5244:5244 \
          -p 6800:6800 \
          xhofe/alist:latest-aio
          docker exec alist-aio ./alist admin set admin
          echo "⏳ 等待手动配置天翼云存储..."
          echo "👉 预留6分钟手动操作时间"
        sleep 6m  # 预留6分钟手动操作时间

    - name: 验证存储配置
      run: |
        TOKEN=$(curl -s -X POST http://localhost:5244/api/auth/login \
         -H "Content-Type: application/json" \
         -d '{"username": "admin", "password": "'"admin"'"}' | jq -r .data.token)
        
         # 检查存储是否激活
         if curl -s http://localhost:5244/api/admin/storage/list -H "Authorization: $TOKEN" | grep -q "work"; then
           echo "✅ 存储配置成功"
          else
           echo "❌ 存储未激活，请检查日志"
           exit 1
         fi
    # ========== 第二阶段：输入验证 ==========
    - name: 输入参数
      run: |
        # 标准化云端路径格式
        CLOUD_PATH="${{ github.event.inputs.cloud_path || '[/网盘路径](/文件夹路径)'}}"

    # ========== 第四阶段：文件下载 ==========
    - name: 智能下载文件
      run: |
        # 提取文件名并处理特殊字符
        RAW_URL="${{ github.event.inputs.download_url }}"
        
        # 通过Aria2下载
        curl -s http://localhost:6800/jsonrpc \
          -H "Content-Type: application/json" \
          -d '{
            "jsonrpc": "2.0",
            "id": "github-action",
            "method": "aria2.addUri",
            "params": [
              ["RAW_URL CLOUD_PATH"],
              {
                "dir": "/opt/alist/data/downloads",
                "split": "10",
                "max-connection-per-server": "8",
                "allow-overwrite": "true"
              }
            ]
          }'

        # 监控下载进度（最长等待6小时）
        timeout 6h bash -c '
          while true; do
            STATUS=$(curl -s http://localhost:6800/jsonrpc \
              -d "{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"aria2.tellActive\",\"params\"\"]}")
            if [ $(echo "$STATUS" | jq ".result | length") -eq 0 ]; then
              break
            fi
            echo "⌛ 下载进度：$(echo "$STATUS" | jq ".result[0].completedLength")/$(echo "$STATUS" | jq ".result[0].totalLength")"
            sleep 30
          done
        ' || echo "⚠️ 警告：下载任务可能未完成"

    # ========== 第六阶段：收尾工作 ==========
    - name: 清理和日志
      if: always()
      run: |
        # 获取容器日志
        docker logs alist-aio > alist.log 2>&1

        # 清理容器
        docker stop alist-aio || true
        docker rm alist-aio || true

        # 上传日志供调试
        echo "========== AList日志 =========="
        cat alist.log
