#!/bin/sh
#==========================================================

# config path
make_path="$(pwd)"
openwrt_dir="openwrt"
imagebuilder_path="${make_path}/${openwrt_dir}"

# targets
releases="21.02.1"
username="v1nch3r"

# config repo
imagebuilder_repo="https://downloads.immortalwrt.org/releases/${releases}/targets/x86/generic/immortalwrt-imagebuilder-${releases}-x86-generic.Linux-x86_64.tar.xz"

# config package
unused_packages="-luci-app-cpufreq -luci-app-turboacc -luci-app-filetransfer"
driver_packages="kmod-usb-net-cdc-ether usb-modeswitch comgt-ncm kmod-usb-net-huawei-cdc-ncm"
openclash_iptables="coreutils-nohup bash iptables dnsmasq-full curl ca-certificates ipset ip-full iptables-mod-tproxy iptables-mod-extra libcap libcap-bin ruby ruby-yaml kmod-tun kmod-inet-diag unzip luci-compat luci luci-base"
my_packages="${unused_packages} luci-theme-material luci-theme-argon luci-app-argon-config luci-app-ttyd luci-app-openclash luci-app-passwall luci-app-shutdown luci-app-netmon luci-app-zerotier luci-app-base64 luci-app-adguardhome luci-app-vnstat2 luci-app-sqm sqm-scripts lsblk nano htop openssh-sftp-server ${driver_packages} ${openclash_iptables}"

error_msg() {
    echo -e "${ERROR} ${1}"
    exit 1
}

download_imagebuilder () {
    wget ${imagebuilder_repo} || error_msg
    tar -xJf immortalwrt-imagebuilder-* && rm -f immortalwrt-imagebuilder-*.tar.xz
    mv -f immortalwrt-imagebuilder-* ${openwrt_dir}
}

custom_packages () {
    wget -P ${imagebuilder_path}/packages/ ${luci_app_openclash} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${luci_app_netmon} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${luci_app_shutdown} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${luci_app_tinyfm} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${luci_app_base64} || error_msg
    wget -P ${imagebuilder_path}/packages/ ${luci_app_adguardhome} || error_msg
}

adjustment_rootfs () {
    mkdir -p ${imagebuilder_path}/files/etc/uci-defaults/
    cp -f ${make_path}/uci-defaults/* ${imagebuilder_path}/files/etc/uci-defaults/
    mkdir -p ${imagebuilder_path}/files/bin/
    wget -P ${make_path}/ ${speedtest_repo} || error_msg
    tar -xzvf ${make_path}/*.tgz -C ${imagebuilder_path}/files/bin/
    rm -f ${make_path}/*.tgz && rm -f ${imagebuilder_path}/files/bin/speedtest.*
}

adding_clash_core () {
    mkdir -p ${imagebuilder_path}/files/etc/openclash/core/
    cd ${imagebuilder_path}/files/etc/openclash/core/
    wget ${clash} && gunzip *.gz || error_msg
    mv -f clash-* clash && rm -f *.gz
    wget ${clash_tun} && gunzip *.gz || error_msg
    mv -f clash-* clash_tun && rm -f *.gz
    wget ${clash_meta} && gunzip *.gz || error_msg
    mv -f clash.* clash_meta && rm -f *.gz
}

build_firmware () {
    cd ${imagebuilder_path}
    make image PROFILE="generic" PACKAGES="${my_packages}" FILES="files" || error_msg
    echo "success..."
}

download_imagebuilder
custom_packages
adjustment_rootfs
adding_clash_core
build_firmware

exit 0
